use chrono::{DateTime, Utc};
use custom_serde::*;
use serde_json::Value;
use std::collections::HashMap;
use super::super::encodings::{Base64Data, MillisecondTimestamp, SecondTimestamp};

#[derive(Debug, Clone, PartialEq, Deserialize, Serialize)]
pub struct SimpleEmailMessage {
    #[serde(rename = "commonHeaders")]
    pub common_headers: SimpleEmailCommonHeaders,
    #[cfg(not(feature = "string-null-empty"))]
    #[serde(deserialize_with = "deserialize_lambda_string")]
    #[serde(default)]
    pub source: Option<String>,
    #[cfg(feature = "string-null-empty")]
    #[serde(deserialize_with = "deserialize_lambda_string")]
    #[serde(default)]
    pub source: String,
    pub timestamp: DateTime<Utc>,
    #[serde(rename = "rawJson")]
    pub raw: Value,
    pub destination: Vec<String>,
    pub headers: Vec<SimpleEmailHeader>,
    #[serde(rename = "headersTruncated")]
    pub headers_truncated: bool,
    #[cfg(not(feature = "string-null-empty"))]
    #[serde(deserialize_with = "deserialize_lambda_string")]
    #[serde(default)]
    #[serde(rename = "messageId")]
    pub message_id: Option<String>,
    #[cfg(feature = "string-null-empty")]
    #[serde(deserialize_with = "deserialize_lambda_string")]
    #[serde(default)]
    #[serde(rename = "messageId")]
    pub message_id: String,
    pub resolutions: Vec<HashMap<String, String>>,
    pub blah: u64,
    pub whatever: i64,
    pub boo: i64,
    pub secs: SecondTimestamp,
    pub millisecs: MillisecondTimestamp,
    #[serde(deserialize_with = "deserialize_lambda_map")]
    pub detail: HashMap<String, Value>,
    pub data: Base64Data,
}